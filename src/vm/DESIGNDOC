            +--------------------------+
            |          OS 211          |
            |  TASK 3: VIRTUAL MEMORY  |
            |      DESIGN DOCUMENT     |
            +--------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Arthur Fox      < af909@doc.ic.ac.uk>
James Hallam    <jh2709@doc.ic.ac.uk>
Michael Thorpe  <mt2309@doc.ic.ac.uk>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

None.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

None.

            PAGE TABLE MANAGEMENT
            =====================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

Each process has a supplemental page table which consists of a pointer back to the process and a struct hash storing the pages.
struct sup_table 
{ 
  struct process* process; /* Pointer to the process the sup_table belongs to */
  struct hash page_table;  /* The hash in which pages are stored */
};


The supplemental page table stores pages with additional information to those in the pagedirectory, which have the struct below. 
struct page 
{
  struct file* file;    /* Pointer to file we expect to find */  
  uint8_t* upage;       /* User virtual address of page*/
  off_t ofs;            /* Offset into process file if page mapped from a file */
  uint32_t read_bytes;  /* Number of bytes that need to be read */
  uint32_t zero_bytes;  /* Number of bytes that need to be zeroed */
  
  bool writable;        /* Whether the page is writable or not */
  bool loaded;          /* Has the page been loaded yet - will not be before being mapped to a kpage*/
  bool valid;           /* If the page has been loaded is it mapped to a frame or swap */
  
  struct thread* owner; /* Pointer to the thread it belongs to */
  uint32_t swap_idx;    /* Index into swap if page is in swap */
  
  struct hash_elem elem;
};


Frames are stored as below...
[
struct frame 
{
  void* sup_page;
  // TODO: Add extra information for eviction
};
static struct frame* table;
static struct lock lock;
]

MISSING STRUCTS?


---- ALGORITHMS ----

>> A2: In a few paragraphs, describe your code for locating the frame,
>> if any, that contains the data of a given page.

??
Whenever a process wants to write to or read into a page and access to phyiscal memory is therefore required then frame_get() will be called which will perform the mapping of a frame to the user virtual page. 

The method frame_get() does this by calling palloc_get_page() which will flip the bit in the pool's bitmap* "use_map" setting that page to used, and from the returned kernel virtual page address it then adds to the frame** "table" the same index as the frame belonging to the user pool's index. 

With this mapping between the frame and its supplemental page reads into or writes using the supplemetal pages user virtual address will be possible.

>> A3: How does your code coordinate accessed and dirty bits between
>> kernel and user virtual addresses that alias a single frame, or
>> alternatively how do you avoid the issue?

We avoid the issue by only giving user processes access to frames through user virtual addresses and keeping track of the accessed and dirty bits of this page in the pagedirectory. 

Before this task user processes had their pages given a mapping between their user virtual address and kernel virtual addresses(which themselves had a one to one mapping with physical memory), and allowed to access memory through dereferencing these kernel virtual addresses. 

Now we have changed it so that valid user pages are mapped to a frame with a frame index and from then on user processes can only interact with the physical frame through this mapping by dereferencing the user virtual address. Only the kernel can access memory through kernel virtual addresses.


---- SYNCHRONIZATION ----

>> A4: When two user processes both need a new frame at the same time,
>> how are races avoided?

???

In the method frame_get() which actually maps a virtual page to a physical frame, the static lock in frame.c is acquired before a frame is gotten and released after. But also we make use of their old function palloc_get_page() which has its own synchronisation?

Nonetheless if we got rid of this lock outside palloc_get_page() it would not stop frames from being freed up.

/*Then palloc_get_page() is called and the kernel page returned is used to map the page to the frames id is mapped to the kernel page in the processes pagedirectory then relased, thus ensuring that only one new frame can be assigned at a time.*/


---- RATIONALE ----

>> A5: Why did you choose the data structure(s) that you did for
>> representing virtual-to-physical mappings?

User virtual addresses are both held in the supplemental page table and the originally defined page directory - we use the virtual addresses stored in the supplemental page table and map these to physical addreses with the original pagedirectory. We use the pagedir since it was already defined and since it already did this mapping we used its code instead of repeating code with the supplemental page table.

               PAGING TO AND FROM DISK
               =======================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

???

Swap is as below ...
[
static struct block* swap_area;
static struct bitmap* swap_state;
static struct lock lock;
]


MISSING STRUCTS?

---- ALGORITHMS ----

>> B2: When a frame is required but none is free, some frame must be
>> evicted.  Describe your code for choosing a frame to evict.

Evicting frames yet to be done ??


>> B3: When a process P obtains a frame that was previously used by a
>> process Q, how do you adjust the page table (and any other data
>> structures) to reflect the frame Q no longer has?

Each page table entry has a bool valid - if Qs page gets its frame evicted then valid will be set to false in its sup_table.

>> B4: Explain your heuristic for deciding whether a page fault for an
>> invalid virtual address should cause the stack to be extended into
>> the page that faulted.

Stack max size is defined in exception.h (its value is Physbase - 1MB) if the fault_addr is between Physbase and MAX_STACK_ADDRESS then we assume that its faulting because the stack needs to grow. We ensure that no other mappings happen to this area other than stack mapping by checking that no mmaps are between it or anything else which gets a user address is between it.

---- SYNCHRONIZATION ----

>> B5: Explain the basics of your VM synchronization design.  In
>> particular, explain how it prevents deadlock.  (Refer to the
>> textbook for an explanation of the necessary conditions for
>> deadlock.)


Not sure how deadlocks are prevented?

>> B6: A page fault in process P can cause another process Q's frame
>> to be evicted.  How do you ensure that Q cannot access or modify
>> the page during the eviction process?  How do you avoid a race
>> between P evicting Q's frame and Q faulting the page back in?

Frame lock ?

>> B7: Suppose a page fault in process P causes a page to be read from
>> the file system or swap.  How do you ensure that a second process Q
>> cannot interfere by e.g. attempting to evict the frame while it is
>> still being read in?

Frame lock?

>> B8: Explain how you handle access to paged-out pages that occur
>> during system calls.  Do you use page faults to bring in pages (as
>> in user programs), or do you have a mechanism for "locking" frames
>> into physical memory, or do you use some other design?  How do you
>> gracefully handle attempted accesses to invalid virtual addresses?

???

---- RATIONALE ----

>> B9: A single lock for the whole VM system would make
>> synchronization easy, but limit parallelism.  On the other hand,
>> using many locks complicates synchronization and raises the
>> possibility for deadlock but allows for high parallelism.  Explain
>> where your design falls along this continuum and why you chose to
>> design it this way.


Currently only one frame lock ?

             MEMORY MAPPED FILES
             ===================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

File structs now track if a file has been memory mapped and if a user has closed a memory mapped file.
struct file
{
...
  bool mmaped;  /* Has the file been mmaped */
  bool closed;  /* User has closed file */
...
};


Processes now have a list of the files they have memory mapped, a supplemental page table and a pointer to the top of their heap.
struct process
{
...
  struct list mmaped_files;     /* List of memory mapped files */
...
  struct sup_table* sup_table;  /* Hash table of pages */
  uint8_t* heap_top;            /* Location of the top of the heap */
};


Processes have a list of the files they have memory mapped, which have the struct below. 
struct mmap_file
{
  mapid_t value;          /* Mapid of the mmaped file */
  struct file* file;      /* Pointer to the file being mapped */
  void* addr;             /* Start address of the mapped file */
  size_t file_size;       /* Size of the file*/
  struct list_elem elem;  /* list_elem */  
};


MISSING STRUCTS?

---- ALGORITHMS ----

>> C2: Describe how memory mapped files integrate into your virtual
>> memory subsystem.  Explain how the page fault and eviction
>> processes differ between swap pages and other pages.

?
Pages which have been mmaped are treated just as any other page. The only difference is that in swap_out() theres a case dealing with eviction for mmap page (show case that does this).

>> C3: Explain how you determine whether a new file mapping overlaps
>> any existing segment.

WRITE NEATLY
Pages have been added to the supplemental page table for all the code segment and the data segment. Pages have also been added for the first page in the stack (which is not lazily loaded), and for the very bottom of the stack.

This means that when memory mapping a file the address the process is attempting to map to is checked with check_pages() to see whether it is not in one of the pages in the page table or whether its in between the stack top and stack bottom.

If check_pages() fails it will return false and syscall_mmap() will return an exit status of -1 to the process's eax register, causing the process to exit cleanly.

---- RATIONALE ----

>> C4: Mappings created with "mmap" have similar semantics to those of
>> data demand-paged from executables, except that "mmap" mappings are
>> written back to their original files, not to swap.  This implies
>> that much of their implementation can be shared.  Explain why your
>> implementation either does or does not share much of the code for
>> the two situations.

?
Currently the kernel treats mmaped pages identically as data demanded-pages throughout the code. Only when checking if the page needs to be evicted will it be treated differently.

               SURVEY QUESTIONS
               ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

Fairly challenging - not too hard?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

All the assignments gave a greater insight into the intricacies of implementing virtual memory.

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

Better explanation of kernel virtual pages and user virtual pages in Pintos.

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining tasks?

Did not ask TAs for help.

>> Any other comments?

None.            +--------------------------+
            |          OS 211          |
            |  TASK 3: VIRTUAL MEMORY  |
            |      DESIGN DOCUMENT     |
            +--------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Arthur Fox      < af909@doc.ic.ac.uk>
James Hallam    <jh2709@doc.ic.ac.uk>
Michael Thorpe  <mt2309@doc.ic.ac.uk>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

None.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

None.

            PAGE TABLE MANAGEMENT
            =====================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

Each process has a supplemental page table which consists of a pointer back to the process and a struct hash storing the pages.
struct sup_table 
{ 
  struct process* process; /* Pointer to the process the sup_table belongs to */
  struct hash page_table;  /* The hash in which pages are stored */
};


The supplemental page table stores pages with additional information to those in the pagedirectory, which have the struct below. 
struct page 
{
  struct file* file;    /* Pointer to file we expect to find */  
  uint8_t* upage;       /* User virtual address of page*/
  off_t ofs;            /* Offset into process file if page mapped from a file */
  uint32_t read_bytes;  /* Number of bytes that need to be read */
  uint32_t zero_bytes;  /* Number of bytes that need to be zeroed */
  
  bool writable;        /* Whether the page is writable or not */
  bool loaded;          /* Has the page been loaded yet - will not be before being mapped to a kpage*/
  bool valid;           /* If the page has been loaded is it mapped to a frame or swap */
  
  struct thread* owner; /* Pointer to the thread it belongs to */
  uint32_t swap_idx;    /* Index into swap if page is in swap */
  
  struct hash_elem elem;
};


Frames are stored as below...
[
struct frame 
{
  void* sup_page;
  // TODO: Add extra information for eviction
};
static struct frame* table;
static struct lock lock;
]

MISSING STRUCTS?


---- ALGORITHMS ----

>> A2: In a few paragraphs, describe your code for locating the frame,
>> if any, that contains the data of a given page.

??
Whenever a process wants to write to or read into a page and access to phyiscal memory is therefore required then frame_get() will be called which will perform the mapping of a frame to the user virtual page. 

The method frame_get() does this by calling palloc_get_page() which will flip the bit in the pool's bitmap* "use_map" setting that page to used, and from the returned kernel virtual page address it then adds to the frame** "table" the same index as the frame belonging to the user pool's index. 

With this mapping between the frame and its supplemental page reads into or writes using the supplemetal pages user virtual address will be possible.

>> A3: How does your code coordinate accessed and dirty bits between
>> kernel and user virtual addresses that alias a single frame, or
>> alternatively how do you avoid the issue?

We avoid the issue by only giving user processes access to frames through user virtual addresses and keeping track of the accessed and dirty bits of this page in the pagedirectory. 

Before this task user processes had their pages given a mapping between their user virtual address and kernel virtual addresses(which themselves had a one to one mapping with physical memory), and allowed to access memory through dereferencing these kernel virtual addresses. 

Now we have changed it so that valid user pages are mapped to a frame with a frame index and from then on user processes can only interact with the physical frame through this mapping by dereferencing the user virtual address. Only the kernel can access memory through kernel virtual addresses.


---- SYNCHRONIZATION ----

>> A4: When two user processes both need a new frame at the same time,
>> how are races avoided?

???

In the method frame_get() which actually maps a virtual page to a physical frame, the static lock in frame.c is acquired before a frame is gotten and released after. But also we make use of their old function palloc_get_page() which has its own synchronisation?

Nonetheless if we got rid of this lock outside palloc_get_page() it would not stop frames from being freed up.

/*Then palloc_get_page() is called and the kernel page returned is used to map the page to the frames id is mapped to the kernel page in the processes pagedirectory then relased, thus ensuring that only one new frame can be assigned at a time.*/


---- RATIONALE ----

>> A5: Why did you choose the data structure(s) that you did for
>> representing virtual-to-physical mappings?

User virtual addresses are both held in the supplemental page table and the originally defined page directory - we use the virtual addresses stored in the supplemental page table and map these to physical addreses with the original pagedirectory. We use the pagedir since it was already defined and since it already did this mapping we used its code instead of repeating code with the supplemental page table.

               PAGING TO AND FROM DISK
               =======================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

???

Swap is as below ...
[
static struct block* swap_area;
static struct bitmap* swap_state;
]

VM lock is in page.c
static struct lock vm_lock;


MISSING STRUCTS?

---- ALGORITHMS ----

>> B2: When a frame is required but none is free, some frame must be
>> evicted.  Describe your code for choosing a frame to evict.


When the kernel needs a frame it will just call palloc_get_page() as before and obtain a kernel page that way (elaborate)

However, when a user process gets a frame it will call frame_get() which itself we calls palloc_get_page() with PAL_USER set which returns a a physical frame from the user pool if one is available.

If no frame is available then the return value will be NULL and we will need to evict a frame. If this is the case we loop through the user pages and choose the frame with the best score based on this heuristic:

!Accessed && !Dirty = 4
 Accessed && !Dirty = 3
!Accessed &&  Dirty = 2
!Accessed && !Dirty = 1

The page with the best score is paged out with swap_out() and we make a call to palloc_get_page() again in an attempt to get back that frame which was deallocated, however in case that frame was allocated to another process in that time we do this in a while loop to ensure that the kpage address returned is not NULL.

Finally frame_get() will carry on as before and add this returned page to the frame table, install the page and set the page to valid in the processe's sup_table.

>> B3: When a process P obtains a frame that was previously used by a
>> process Q, how do you adjust the page table (and any other data
>> structures) to reflect the frame Q no longer has?

When process P obtains a frame previously used by process Q by the algorithm explained above, swap_out() will be called in the process. This method is passed process Q's sup_table and will update the table in accordance to the action taken, setting loaded to false if the page was originally loaded.

The method will also call frame_free() with process Q's sup_table updating both its sup_table and its pagedir. Firstly setting the pages valid bool in the supplemental page table to false (to indicate the page is no longer in memory), then clearing up the pagedir by clearing the page from pagedir, freeing its frame and deleting it from the frame table.

>> B4: Explain your heuristic for deciding whether a page fault for an
>> invalid virtual address should cause the stack to be extended into
>> the page that faulted.

When page faulting we search for the page in the processes sup_table and pagedir, if the page is not in either it means that the page has not been created yet and is most likely due to process trying to write to a page in the stack which is yet to be allocated.

When this occurs we check if the fault address is a max of 32 bytes below the current stack pointer, because there is no assembly code instruction which can push data onto the stack larger than 32 bytes (Check this???), and it would therefore be a bad read/write into this area if the process was attempting to read/write further down the virtual address space than this. 

If it is the case that the fault address is as we expect we do one final check to see that the fault address is above MAX_STACK_ADDRESS which is defined in excecption.h as PHYSBASE - 1MB, as we have decided to place a 1MB limit on the size of the stack. If we are in this situation then we assume it safe to grow the stack and we allocate a page for it.

---- SYNCHRONIZATION ----

>> B5: Explain the basics of your VM synchronization design.  In
>> particular, explain how it prevents deadlock.  (Refer to the
>> textbook for an explanation of the necessary conditions for
>> deadlock.)

There is only one lock shared between the whole virtual memory system which is internal to page.c. Since processes can only ever make calls to swap.c or frame.c through calls to functions in page.c this lock is enough to guarantee synchronisation within the whole virtual memory system. 

NOT SURE WHERE THIS IS LOCKED - NEED TO KNOW TO BE ABLE TO EXPLAIN BASICS OF SYNCHRONISATION DESIGN

Since there is only one lock for the whole system there can never be a situation of deadlock.

>> B6: A page fault in process P can cause another process Q's frame
>> to be evicted.  How do you ensure that Q cannot access or modify
>> the page during the eviction process?  How do you avoid a race
>> between P evicting Q's frame and Q faulting the page back in?

If a page fault occurs in process P leading to eviction of a frame belonging to process Q and Q attempts to modify data in this frame - Do you maybe free the frame before you tell process P that it now has it allocated??

Race conditions between P evicting Q's frame and Q page faulting the page back in are avoided with the vm_lock being acquired in both load_page() and page_swap_in() (and in page_create() in growing the stack ??). As the only ways in which a page fault can lead to a new frame being allocated are through these methods and they all attempt to acquire the vm_lock, process Q cannot fault the page back in if process P is still in the process of eviction and frame allocation for the page it wants to reead/write to.

>> B7: Suppose a page fault in process P causes a page to be read from
>> the file system or swap.  How do you ensure that a second process Q
>> cannot interfere by e.g. attempting to evict the frame while it is
>> still being read in?

??
If process P wants a page to be swapped in it will call page_swap_in() which acquires the vm_lock before calling swap_in(). Therefore, firstly process Q will not be able to do a swap_in() itself and have some sort of synchronisation conflicts. Secondly, Only by calling page_allocate() or load_page() which call frame_get() may process Q evict this frame and the vm_lock is acquired in both cases.

>> B8: Explain how you handle access to paged-out pages that occur
>> during system calls.  Do you use page faults to bring in pages (as
>> in user programs), or do you have a mechanism for "locking" frames
>> into physical memory, or do you use some other design?  How do you
>> gracefully handle attempted accesses to invalid virtual addresses?

Rough:
syscall_read() occurs and pages for the buffer are loaded in with load_buffer_pages() which allocates the frames to pages...

Then another process comes in and those pages get swapped out.

Then initial process carries on with the syscall_read() and the pages it thought were loaded are not, an access to these pages will cause a page fault in kernel context.

The context the page fault is in is checked when we enter the page fault handler. If we are in kernel context then we will take the stack pointer we check against to be the threads stack pointer rather than the one from the interrupt frame. 

The page will be faulted back in and then the read system call will carry on.

No locking is used.


---- RATIONALE ----

>> B9: A single lock for the whole VM system would make
>> synchronization easy, but limit parallelism.  On the other hand,
>> using many locks complicates synchronization and raises the
>> possibility for deadlock but allows for high parallelism.  Explain
>> where your design falls along this continuum and why you chose to
>> design it this way.

We only use a single lock for the paging system, vm_lock, which is internal to page.c. 

We do this because it is convenient and simplifies the design. As everything needs to interact through the functions in page.c there is no need to have locks in swap.c and frame.c?

             MEMORY MAPPED FILES
             ===================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

File structs now track if a file has been memory mapped and if a user has closed a memory mapped file.
struct file
{
...
  bool mmaped;  /* Has the file been mmaped */
  bool closed;  /* User has closed file */
...
};


Processes now have a list of the files they have memory mapped, a supplemental page table and a pointer to the top of their heap.
struct process
{
...
  struct list mmaped_files;     /* List of memory mapped files */
...
  struct sup_table* sup_table;  /* Hash table of pages */
  uint8_t* heap_top;            /* Location of the top of the heap */
};


Processes have a list of the files they have memory mapped, which have the struct below. 
struct mmap_file
{
  mapid_t value;          /* Mapid of the mmaped file */
  struct file* file;      /* Pointer to the file being mapped */
  void* addr;             /* Start address of the mapped file */
  size_t file_size;       /* Size of the file*/
  struct list_elem elem;  /* list_elem */  
};


MISSING STRUCTS?

---- ALGORITHMS ----

>> C2: Describe how memory mapped files integrate into your virtual
>> memory subsystem.  Explain how the page fault and eviction
>> processes differ between swap pages and other pages.

?
Pages which have been mmaped are treated just as any other page. The only difference is that in swap_out() theres a case dealing with eviction for mmap page (show case that does this).

>> C3: Explain how you determine whether a new file mapping overlaps
>> any existing segment.

WRITE NEATLY
Pages have been added to the supplemental page table for all the code segment and the data segment. Pages have also been added for the first page in the stack (which is not lazily loaded), and for the very bottom of the stack.

This means that when memory mapping a file the address the process is attempting to map to is checked with check_pages() to see whether it is not in one of the pages in the page table or whether its in between the stack top and stack bottom.

If check_pages() fails it will return false and syscall_mmap() will return an exit status of -1 to the process's eax register, causing the process to exit cleanly.

---- RATIONALE ----

>> C4: Mappings created with "mmap" have similar semantics to those of
>> data demand-paged from executables, except that "mmap" mappings are
>> written back to their original files, not to swap.  This implies
>> that much of their implementation can be shared.  Explain why your
>> implementation either does or does not share much of the code for
>> the two situations.

?
Currently the kernel treats mmaped pages identically as data demanded-pages throughout the code. Only when checking if the page needs to be evicted will it be treated differently.

               SURVEY QUESTIONS
               ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

Fairly challenging - not too hard?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

All the assignments gave a greater insight into the intricacies of implementing virtual memory.

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

Better explanation of kernel virtual pages and user virtual pages in Pintos.

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining tasks?

Did not ask TAs for help.

>> Any other comments?

None.
