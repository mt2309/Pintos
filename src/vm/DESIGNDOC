            +--------------------------+
            |          OS 211          |
            |  TASK 3: VIRTUAL MEMORY  |
            |      DESIGN DOCUMENT     |
            +--------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Arthur Fox      < af909@doc.ic.ac.uk>
James Hallam    <jh2709@doc.ic.ac.uk>
Michael Thorpe  <mt2309@doc.ic.ac.uk>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

None.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

None.

            PAGE TABLE MANAGEMENT
            =====================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

Each process has a supplemental page table which consists of a pointer back to the process and a struct hash storing the pages.
struct sup_table 
{ 
  struct process* process; /* Pointer to the process the sup_table belongs to */
  struct hash page_table;  /* The hash in which pages are stored */
};


The supplemental page table stores pages with additional information to those in the pagedirectory, which have the struct below. 
struct page 
{
  struct file* file;    /* Pointer to file we expect to find */  
  uint8_t* upage;       /* User virtual address of page*/
  off_t ofs;            /* Offset into process file if page mapped from a file */
  uint32_t read_bytes;  /* Number of bytes that need to be read */
  uint32_t zero_bytes;  /* Number of bytes that need to be zeroed */
  
  bool writable;        /* Whether the page is writable or not */
  bool loaded;          /* Has the page been loaded yet - will not be before being mapped to a kpage*/
  bool valid;           /* If the page has been loaded is it mapped to a frame or swap */
  
  struct thread* owner; /* Pointer to the thread it belongs to */
  uint32_t swap_idx;    /* Index into swap if page is in swap */
  
  struct hash_elem elem;
};


MISSING STRUCTS?


---- ALGORITHMS ----

>> A2: In a few paragraphs, describe your code for locating the frame,
>> if any, that contains the data of a given page.

With function x convert a page address into an index into the frame table array.

>> A3: How does your code coordinate accessed and dirty bits between
>> kernel and user virtual addresses that alias a single frame, or
>> alternatively how do you avoid the issue?

We avoid the issue by only accessing user virtual pages through user virtual addresses, no kernel virtual addresses are used (apart from by the kernel).

---- SYNCHRONIZATION ----

>> A4: When two user processes both need a new frame at the same time,
>> how are races avoided?

Theres a frame lock! :D :D :D :D

---- RATIONALE ----

>> A5: Why did you choose the data structure(s) that you did for
>> representing virtual-to-physical mappings?

User virtual addresses are both held in the supplemental page table and the originally defined page directory - we use the virtual addresses stored in the supplemental page table and map these to physical addreses with the original pagedirectory. We use the pagedir since it was already defined and kept its code for convenience.

               PAGING TO AND FROM DISK
               =======================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

???

Swap is as below ...
[
static struct block* swap_area;
static struct bitmap* swap_state;
static struct lock lock;
]

Frames are stored as below...
[
struct frame 
{
  void* sup_page;
  // TODO: Add extra information for eviction
};
static struct frame* table;
static struct lock lock;
]


MISSING STRUCTS?

---- ALGORITHMS ----

>> B2: When a frame is required but none is free, some frame must be
>> evicted.  Describe your code for choosing a frame to evict.

Evicting frames yet to be done ??


>> B3: When a process P obtains a frame that was previously used by a
>> process Q, how do you adjust the page table (and any other data
>> structures) to reflect the frame Q no longer has?

Each page table entry has a bool valid - if Qs page gets its frame evicted then valid will be set to false in its sup_table.

>> B4: Explain your heuristic for deciding whether a page fault for an
>> invalid virtual address should cause the stack to be extended into
>> the page that faulted.

Stack max size is defined in exception.h (its value is Physbase - 1MB) if the fault_addr is between Physbase and MAX_STACK_ADDRESS then we assume that its faulting because the stack needs to grow. We ensure that no other mappings happen to this area other than stack mapping by checking that no mmaps are between it or anything else which gets a user address is between it.

---- SYNCHRONIZATION ----

>> B5: Explain the basics of your VM synchronization design.  In
>> particular, explain how it prevents deadlock.  (Refer to the
>> textbook for an explanation of the necessary conditions for
>> deadlock.)


Not sure how deadlocks are prevented?

>> B6: A page fault in process P can cause another process Q's frame
>> to be evicted.  How do you ensure that Q cannot access or modify
>> the page during the eviction process?  How do you avoid a race
>> between P evicting Q's frame and Q faulting the page back in?

Frame lock ?

>> B7: Suppose a page fault in process P causes a page to be read from
>> the file system or swap.  How do you ensure that a second process Q
>> cannot interfere by e.g. attempting to evict the frame while it is
>> still being read in?

Frame lock?

>> B8: Explain how you handle access to paged-out pages that occur
>> during system calls.  Do you use page faults to bring in pages (as
>> in user programs), or do you have a mechanism for "locking" frames
>> into physical memory, or do you use some other design?  How do you
>> gracefully handle attempted accesses to invalid virtual addresses?

???

---- RATIONALE ----

>> B9: A single lock for the whole VM system would make
>> synchronization easy, but limit parallelism.  On the other hand,
>> using many locks complicates synchronization and raises the
>> possibility for deadlock but allows for high parallelism.  Explain
>> where your design falls along this continuum and why you chose to
>> design it this way.


Currently only one frame lock ?

             MEMORY MAPPED FILES
             ===================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

File structs now track if a file has been memory mapped and if a user has closed a memory mapped file.
struct file
{
...
  bool mmaped;  /* Has the file been mmaped */
  bool closed;  /* User has closed file */
...
};


Processes now have a list of the files they have memory mapped, a supplemental page table and a pointer to the top of their heap.
struct process
{
...
  struct list mmaped_files;     /* List of memory mapped files */
...
  struct sup_table* sup_table;  /* Hash table of pages */
  uint8_t* heap_top;            /* Location of the top of the heap */
};


Processes have a list of the files they have memory mapped, which have the struct below. 
struct mmap_file
{
  mapid_t value;          /* Mapid of the mmaped file */
  struct file* file;      /* Pointer to the file being mapped */
  void* addr;             /* Start address of the mapped file */
  size_t file_size;       /* Size of the file*/
  struct list_elem elem;  /* list_elem */  
};


MISSING STRUCTS?

---- ALGORITHMS ----

>> C2: Describe how memory mapped files integrate into your virtual
>> memory subsystem.  Explain how the page fault and eviction
>> processes differ between swap pages and other pages.

?

>> C3: Explain how you determine whether a new file mapping overlaps
>> any existing segment.

Not yet?

---- RATIONALE ----

>> C4: Mappings created with "mmap" have similar semantics to those of
>> data demand-paged from executables, except that "mmap" mappings are
>> written back to their original files, not to swap.  This implies
>> that much of their implementation can be shared.  Explain why your
>> implementation either does or does not share much of the code for
>> the two situations.

Not sure how we handle this?

               SURVEY QUESTIONS
               ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

Fairly challenging - not too hard?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

All the assignments gave a greater insight into the intricacies of implementing virtual memory.

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

Better explanation of kernel virtual pages and user virtual pages in Pintos.

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining tasks?

Did not ask TAs for help.

>> Any other comments?

None.
